// Generated from ../grammar/FieldMapperLexer.g4 by ANTLR 4.9.0-SNAPSHOT


import { ATN } from "antlr4ts/atn/ATN";
import { ATNDeserializer } from "antlr4ts/atn/ATNDeserializer";
import { CharStream } from "antlr4ts/CharStream";
import { Lexer } from "antlr4ts/Lexer";
import { LexerATNSimulator } from "antlr4ts/atn/LexerATNSimulator";
import { NotNull } from "antlr4ts/Decorators";
import { Override } from "antlr4ts/Decorators";
import { RuleContext } from "antlr4ts/RuleContext";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { VocabularyImpl } from "antlr4ts/VocabularyImpl";

import * as Utils from "antlr4ts/misc/Utils";


export class FieldMapperLexer extends Lexer {
	public static readonly CONCAT = 1;
	public static readonly LEFT_PAREN = 2;
	public static readonly RIGHT_PAREN = 3;
	public static readonly WHITESPACE = 4;
	public static readonly ARG_SEPARATOR = 5;
	public static readonly EQ = 6;
	public static readonly LT = 7;
	public static readonly GT = 8;
	public static readonly LTE = 9;
	public static readonly GTE = 10;
	public static readonly NE = 11;
	public static readonly OPEN_SQUARE_BR = 12;
	public static readonly CLOSE_SQUARE_BR = 13;
	public static readonly QUOTE = 14;
	public static readonly STRING_LITERAL = 15;
	public static readonly NUMBER = 16;
	public static readonly TRUE = 17;
	public static readonly FALSE = 18;
	public static readonly ALPHABETIC_TOKEN = 19;
	public static readonly ALPHANUMERIC_TOKEN = 20;
	public static readonly SPECIALCHAR_TOKEN = 21;

	// tslint:disable:no-trailing-whitespace
	public static readonly channelNames: string[] = [
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN",
	];

	// tslint:disable:no-trailing-whitespace
	public static readonly modeNames: string[] = [
		"DEFAULT_MODE",
	];

	public static readonly ruleNames: string[] = [
		"AT", "DIGIT", "LETTER", "CONCAT", "LEFT_PAREN", "RIGHT_PAREN", "WHITESPACE", 
		"ARG_SEPARATOR", "EQ", "LT", "GT", "LTE", "GTE", "NE", "OPEN_SQUARE_BR", 
		"CLOSE_SQUARE_BR", "QUOTE", "STRING_LITERAL", "NUMBER", "TRUE", "FALSE", 
		"ALPHABETIC_TOKEN", "ALPHANUMERIC_TOKEN", "SPECIALCHAR_TOKEN",
	];

	private static readonly _LITERAL_NAMES: Array<string | undefined> = [
		undefined, "'&'", "'('", "')'", undefined, "','", "'='", "'<'", "'>'", 
		"'<='", "'>='", "'<>'", "'['", "']'", "'''",
	];
	private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
		undefined, "CONCAT", "LEFT_PAREN", "RIGHT_PAREN", "WHITESPACE", "ARG_SEPARATOR", 
		"EQ", "LT", "GT", "LTE", "GTE", "NE", "OPEN_SQUARE_BR", "CLOSE_SQUARE_BR", 
		"QUOTE", "STRING_LITERAL", "NUMBER", "TRUE", "FALSE", "ALPHABETIC_TOKEN", 
		"ALPHANUMERIC_TOKEN", "SPECIALCHAR_TOKEN",
	];
	public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(FieldMapperLexer._LITERAL_NAMES, FieldMapperLexer._SYMBOLIC_NAMES, []);

	// @Override
	// @NotNull
	public get vocabulary(): Vocabulary {
		return FieldMapperLexer.VOCABULARY;
	}
	// tslint:enable:no-trailing-whitespace


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(FieldMapperLexer._ATN, this);
	}

	// @Override
	public get grammarFileName(): string { return "FieldMapperLexer.g4"; }

	// @Override
	public get ruleNames(): string[] { return FieldMapperLexer.ruleNames; }

	// @Override
	public get serializedATN(): string { return FieldMapperLexer._serializedATN; }

	// @Override
	public get channelNames(): string[] { return FieldMapperLexer.channelNames; }

	// @Override
	public get modeNames(): string[] { return FieldMapperLexer.modeNames; }

	public static readonly _serializedATN: string =
		"\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x02\x17\xA6\b\x01" +
		"\x04\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06" +
		"\x04\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r" +
		"\t\r\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t" +
		"\x12\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04\x17\t" +
		"\x17\x04\x18\t\x18\x04\x19\t\x19\x03\x02\x03\x02\x03\x03\x03\x03\x03\x04" +
		"\x03\x04\x03\x05\x03\x05\x03\x06\x03\x06\x03\x07\x03\x07\x03\b\x06\bA" +
		"\n\b\r\b\x0E\bB\x03\b\x03\b\x03\t\x03\t\x03\n\x03\n\x03\v\x03\v\x03\f" +
		"\x03\f\x03\r\x03\r\x03\r\x03\x0E\x03\x0E\x03\x0E\x03\x0F\x03\x0F\x03\x0F" +
		"\x03\x10\x03\x10\x03\x11\x03\x11\x03\x12\x03\x12\x03\x13\x03\x13\x07\x13" +
		"`\n\x13\f\x13\x0E\x13c\v\x13\x03\x13\x03\x13\x03\x14\x06\x14h\n\x14\r" +
		"\x14\x0E\x14i\x03\x14\x03\x14\x06\x14n\n\x14\r\x14\x0E\x14o\x05\x14r\n" +
		"\x14\x03\x15\x03\x15\x03\x15\x03\x15\x03\x15\x03\x15\x03\x15\x03\x15\x03" +
		"\x15\x03\x15\x03\x15\x03\x15\x05\x15\x80\n\x15\x03\x16\x03\x16\x03\x16" +
		"\x03\x16\x03\x16\x03\x16\x03\x16\x03\x16\x03\x16\x03\x16\x03\x16\x03\x16" +
		"\x03\x16\x03\x16\x03\x16\x05\x16\x91\n\x16\x03\x17\x06\x17\x94\n\x17\r" +
		"\x17\x0E\x17\x95\x03\x18\x03\x18\x07\x18\x9A\n\x18\f\x18\x0E\x18\x9D\v" +
		"\x18\x03\x19\x03\x19\x06\x19\xA1\n\x19\r\x19\x0E\x19\xA2\x03\x19\x03\x19" +
		"\x02\x02\x02\x1A\x03\x02\x02\x05\x02\x02\x07\x02\x02\t\x02\x03\v\x02\x04" +
		"\r\x02\x05\x0F\x02\x06\x11\x02\x07\x13\x02\b\x15\x02\t\x17\x02\n\x19\x02" +
		"\v\x1B\x02\f\x1D\x02\r\x1F\x02\x0E!\x02\x0F#\x02\x10%\x02\x11\'\x02\x12" +
		")\x02\x13+\x02\x14-\x02\x15/\x02\x161\x02\x17\x03\x02\b\x03\x022;\x04" +
		"\x02C\\c|\x04\x02\v\v\"\"\x06\x02\f\f\x0F\x0F$$^^\x07\x02//2;C\\aac|\x03" +
		"\x02__\x02\xAE\x02\t\x03\x02\x02\x02\x02\v\x03\x02\x02\x02\x02\r\x03\x02" +
		"\x02\x02\x02\x0F\x03\x02\x02\x02\x02\x11\x03\x02\x02\x02\x02\x13\x03\x02" +
		"\x02\x02\x02\x15\x03\x02\x02\x02\x02\x17\x03\x02\x02\x02\x02\x19\x03\x02" +
		"\x02\x02\x02\x1B\x03\x02\x02\x02\x02\x1D\x03\x02\x02\x02\x02\x1F\x03\x02" +
		"\x02\x02\x02!\x03\x02\x02\x02\x02#\x03\x02\x02\x02\x02%\x03\x02\x02\x02" +
		"\x02\'\x03\x02\x02\x02\x02)\x03\x02\x02\x02\x02+\x03\x02\x02\x02\x02-" +
		"\x03\x02\x02\x02\x02/\x03\x02\x02\x02\x021\x03\x02\x02\x02\x033\x03\x02" +
		"\x02\x02\x055\x03\x02\x02\x02\x077\x03\x02\x02\x02\t9\x03\x02\x02\x02" +
		"\v;\x03\x02\x02\x02\r=\x03\x02\x02\x02\x0F@\x03\x02\x02\x02\x11F\x03\x02" +
		"\x02\x02\x13H\x03\x02\x02\x02\x15J\x03\x02\x02\x02\x17L\x03\x02\x02\x02" +
		"\x19N\x03\x02\x02\x02\x1BQ\x03\x02\x02\x02\x1DT\x03\x02\x02\x02\x1FW\x03" +
		"\x02\x02\x02!Y\x03\x02\x02\x02#[\x03\x02\x02\x02%]\x03\x02\x02\x02\'g" +
		"\x03\x02\x02\x02)\x7F\x03\x02\x02\x02+\x90\x03\x02\x02\x02-\x93\x03\x02" +
		"\x02\x02/\x97\x03\x02\x02\x021\x9E\x03\x02\x02\x0234\x07B\x02\x024\x04" +
		"\x03\x02\x02\x0256\t\x02\x02\x026\x06\x03\x02\x02\x0278\t\x03\x02\x02" +
		"8\b\x03\x02\x02\x029:\x07(\x02\x02:\n\x03\x02\x02\x02;<\x07*\x02\x02<" +
		"\f\x03\x02\x02\x02=>\x07+\x02\x02>\x0E\x03\x02\x02\x02?A\t\x04\x02\x02" +
		"@?\x03\x02\x02\x02AB\x03\x02\x02\x02B@\x03\x02\x02\x02BC\x03\x02\x02\x02" +
		"CD\x03\x02\x02\x02DE\b\b\x02\x02E\x10\x03\x02\x02\x02FG\x07.\x02\x02G" +
		"\x12\x03\x02\x02\x02HI\x07?\x02\x02I\x14\x03\x02\x02\x02JK\x07>\x02\x02" +
		"K\x16\x03\x02\x02\x02LM\x07@\x02\x02M\x18\x03\x02\x02\x02NO\x07>\x02\x02" +
		"OP\x07?\x02\x02P\x1A\x03\x02\x02\x02QR\x07@\x02\x02RS\x07?\x02\x02S\x1C" +
		"\x03\x02\x02\x02TU\x07>\x02\x02UV\x07@\x02\x02V\x1E\x03\x02\x02\x02WX" +
		"\x07]\x02\x02X \x03\x02\x02\x02YZ\x07_\x02\x02Z\"\x03\x02\x02\x02[\\\x07" +
		")\x02\x02\\$\x03\x02\x02\x02]a\x07$\x02\x02^`\n\x05\x02\x02_^\x03\x02" +
		"\x02\x02`c\x03\x02\x02\x02a_\x03\x02\x02\x02ab\x03\x02\x02\x02bd\x03\x02" +
		"\x02\x02ca\x03\x02\x02\x02de\x07$\x02\x02e&\x03\x02\x02\x02fh\x05\x05" +
		"\x03\x02gf\x03\x02\x02\x02hi\x03\x02\x02\x02ig\x03\x02\x02\x02ij\x03\x02" +
		"\x02\x02jq\x03\x02\x02\x02km\x070\x02\x02ln\x05\x05\x03\x02ml\x03\x02" +
		"\x02\x02no\x03\x02\x02\x02om\x03\x02\x02\x02op\x03\x02\x02\x02pr\x03\x02" +
		"\x02\x02qk\x03\x02\x02\x02qr\x03\x02\x02\x02r(\x03\x02\x02\x02st\x07V" +
		"\x02\x02tu\x07t\x02\x02uv\x07w\x02\x02v\x80\x07g\x02\x02wx\x07V\x02\x02" +
		"xy\x07T\x02\x02yz\x07W\x02\x02z\x80\x07G\x02\x02{|\x07v\x02\x02|}\x07" +
		"t\x02\x02}~\x07w\x02\x02~\x80\x07g\x02\x02\x7Fs\x03\x02\x02\x02\x7Fw\x03" +
		"\x02\x02\x02\x7F{\x03\x02\x02\x02\x80*\x03\x02\x02\x02\x81\x82\x07H\x02" +
		"\x02\x82\x83\x07c\x02\x02\x83\x84\x07n\x02\x02\x84\x85\x07u\x02\x02\x85" +
		"\x91\x07g\x02\x02\x86\x87\x07H\x02\x02\x87\x88\x07C\x02\x02\x88\x89\x07" +
		"N\x02\x02\x89\x8A\x07U\x02\x02\x8A\x91\x07G\x02\x02\x8B\x8C\x07h\x02\x02" +
		"\x8C\x8D\x07c\x02\x02\x8D\x8E\x07n\x02\x02\x8E\x8F\x07u\x02\x02\x8F\x91" +
		"\x07g\x02\x02\x90\x81\x03\x02\x02\x02\x90\x86\x03\x02\x02\x02\x90\x8B" +
		"\x03\x02\x02\x02\x91,\x03\x02\x02\x02\x92\x94\x05\x07\x04\x02\x93\x92" +
		"\x03\x02\x02\x02\x94\x95\x03\x02\x02\x02\x95\x93\x03\x02\x02\x02\x95\x96" +
		"\x03\x02\x02\x02\x96.\x03\x02\x02\x02\x97\x9B\t\x03\x02\x02\x98\x9A\t" +
		"\x06\x02\x02\x99\x98\x03\x02\x02\x02\x9A\x9D\x03\x02\x02\x02\x9B\x99\x03" +
		"\x02\x02\x02\x9B\x9C\x03\x02\x02\x02\x9C0\x03\x02\x02\x02\x9D\x9B\x03" +
		"\x02\x02\x02\x9E\xA0\x05\x1F\x10\x02\x9F\xA1\n\x07\x02\x02\xA0\x9F\x03" +
		"\x02\x02\x02\xA1\xA2\x03\x02\x02\x02\xA2\xA0\x03\x02\x02\x02\xA2\xA3\x03" +
		"\x02\x02\x02\xA3\xA4\x03\x02\x02\x02\xA4\xA5\x05!\x11\x02\xA52\x03\x02" +
		"\x02\x02\r\x02Baioq\x7F\x90\x95\x9B\xA2\x03\x02\x03\x02";
	public static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!FieldMapperLexer.__ATN) {
			FieldMapperLexer.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(FieldMapperLexer._serializedATN));
		}

		return FieldMapperLexer.__ATN;
	}

}

